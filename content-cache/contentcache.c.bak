#include <stdlib.h>
#include <stdio.h>
#include <time.h>
#include <assert.h>
#include "debugg.h"
#include "md5.h"
#include "utils.h"
#include "arc.h"
#include "pdd_config.h"
#include "contentcache.h"
#include "debug.h"
#include "unused.h"

/* Globals */
int CCACHEsize_MB = 200;	/* Default content-cache size is 200MB */
__u32 MAX_CCACHE_SIZE = 0;		/* Value is set via contentcache_init */
struct __arc *ccache = NULL;
__u64 ccache_hits = 0;
__u64 ccache_misses = 0;
__u64 cmap_hits = 0;
__u64 cmap_misses = 0;
__u64 ccache_dedup_hits = 0;
__u64 ccache_nondedup_hits = 0;

extern int disksimflag;
extern int collectformat;
extern const char zeroarray[65537];
extern const char zerohash[HASHLEN_STR-1];

/* This is the object we're managing. It has a name (md5/sha1)
 * and some data. This data will be loaded when ARC instruct
 * us to do so. */
struct object {
    struct __arc_object entry;

#if 1
	__u32 iodedupID;
#endif
    void *dhashkey;
    void *content;
};

/**
* Here are the operations implemented
*/
static __u32 __cop_hash(const void *key)
{
	/* If key is content, len=BLKSIZE, else if key=MD5, len=HASHLEN */
	const unsigned char *p, *keyp;   
    unsigned int size;
    unsigned int val;

    if (!key)
    {
        RET_ERR("NULL key in __cop_hash().\n");
    }

    val = 0;
    keyp = (unsigned char *)key;
    //size = strlen(keyp);
    size = HASHLEN;
    for (p = keyp; (unsigned int)(p - keyp) < size; p++)
            val = (val << 4 | (val >> (8*sizeof(unsigned int)-4))) ^ (*p);
    return val;		//& (h->size - 1)
}

static int __cop_compare(struct __arc_object *e, const void *key)
{
    const unsigned char *keyp1, *keyp2;
	struct object *obj = __arc_list_entry(e, struct object, entry);

#if defined(SIMREPLAY_DEBUG_SS_DONE_DONE)
	assert(key != NULL);
	assert(obj != NULL);
	assert(obj->dhashkey != NULL);
#endif

    keyp1 = (unsigned char *)key;
    keyp2 = (unsigned char *)obj->dhashkey;
    return memcmp(keyp1, keyp2, HASHLEN);
}

#if 1
static struct __arc_object *__cop_create(const void *dhashkey, 
				const void *content, unsigned int datalen, __u32 ioblk)
#else
static struct __arc_object *__cop_create(const void *dhashkey, 
				const void *content, unsigned int datalen)
#endif
{
	/* Create object datastructure */
    struct object *obj = malloc(sizeof(struct object));
	if (obj == NULL)
	{
		fprintf(stdout, "malloc failed for obj in __cop_create()\n");
		return NULL;
	}
#if defined(SIMREPLAY_DEBUG_SS_DONE_DONE)
    fprintf(stdout, "In %s\n", __FUNCTION__);
#endif

	/* Allocate memory to hold content and copy content over */
	if (collectformat)
	{
		obj->content = malloc(HASHLEN_STR);
	    memcpy(obj->content, content, HASHLEN_STR-1);
		((char*)obj->content)[HASHLEN_STR-1] = '\0';
	}
	else
	{
		obj->content = malloc(datalen);
	    memcpy(obj->content, content, datalen);
	}
#if 1
	obj->iodedupID = ioblk;
#endif

	/* Allocate memory to hold dhashkey and copy over */
	obj->dhashkey = malloc(HASHLEN);
    memcpy(obj->dhashkey, dhashkey, HASHLEN);

	/* Init the object datastructure with size of the content */
    __arc_object_init(&obj->entry, datalen);
    return &obj->entry;
}

static int __cop_fetch(struct __arc_object *e)
{
    struct object *obj = __arc_list_entry(e, struct object, entry);
	if (obj->content != NULL)
	    return 0;	//0 for success here 
	else
	{
#if defined(SIMREPLAY_DEBUG_SS_DONE)
		fprintf(stdout, "In %s: dhashkey=%s\n", __FUNCTION__, (char*)obj->dhashkey);
#endif
		return -1;	//-1 for fetch failure
	}
}

static void __cop_evict(struct __arc_object *e)
{
    /* SSS: Eviction from cache involves removal of data, but the metadata
     * is still held for ARC purposes???
     */
    struct object *obj = __arc_list_entry(e, struct object, entry);
#if defined(SIMREPLAY_DEBUG_SS_DONE_DONE)
    fprintf(stdout, "In %s\n", __FUNCTION__);
#endif

    free(obj->content);
    obj->content = NULL;   /*SSS: so that it can be used in __cop_destroy */
    free(obj->dhashkey);
    obj->dhashkey = NULL;   /*SSS: so that it can be used in __cop_destroy */

//	UNUSED(obj);
}

static void __cop_destroy(struct __arc_object *e)
{
    struct object *obj = __arc_list_entry(e, struct object, entry);
#if defined(SIMREPLAY_DEBUG_SS_DONE_DONE)
    fprintf(stdout, "In %s\n", __FUNCTION__);
#endif
    /* SSS: should free(obj) be preceeded with free(obj->content)? */
    if (obj->content)
	{
        free(obj->content);
		obj->content = NULL;
	}
    if (obj->dhashkey)
	{
        free(obj->dhashkey);
		obj->dhashkey = NULL;
	}
	if (obj)
	    free(obj);
	else
		printf("why are we even doing free/destroy on this non-existent obj?\n");
}

static struct __arc_ops ops = {
    .hash       = __cop_hash,
    .cmp        = __cop_compare,
    .create     = __cop_create,
    .fetch      = __cop_fetch,
    .evict      = __cop_evict,
    .destroy    = __cop_destroy
};

void contentcache_init()
{
#if defined(SIMREPLAY_DEBUG_SS_DONE_DONE)
    fprintf(stdout, "In %s\n", __FUNCTION__);
#endif
	/* Calculate total content cache size */
	MAX_CCACHE_SIZE = CCACHEsize_MB * 1024 * 1024;

	/* Initialize for calculated size */
	ccache = __arc_create(&ops, MAX_CCACHE_SIZE);
}

void contentcache_exit()
{
	__arc_destroy(ccache);
}

void contentcache_add(__u8* dhashkey, __u8* content, unsigned int datalen,
						__u32 ioblk)
{
	struct __arc_object *obj = NULL;
#if defined(SIMREPLAY_DEBUG_SS_DONE_DONE)
    fprintf(stdout, "In %s\n", __FUNCTION__);
#endif
    /* Content in content-cache should be BLKSIZE long, but for sake
     * of simulation by traces, we may just use the human representation of
     * MD5 hashes as content themselves. Whichever the case may be, dhashkey
	 * is that content's hash (MD5/SHA1)
     */
	obj = __arc_add(ccache, dhashkey, content, datalen, ioblk);
	if (obj == NULL)
		fatal(NULL, ERR_USERCALL, "__arc_add failed\n");
}

/* In reality, we might lookup content-based cache hashtable using a hash function
 * on MD5/SHA1 of the given content. So, the lookup is based on MD5 and returned
 * is the content itself. 
 */
__u8* contentcache_lookup(__u8* dhashkey, unsigned int len, __u32 iodedupID)
{
	struct __arc_object *e = NULL;
#if defined(SIMREPLAY_DEBUG_SS_DONE)
    fprintf(stdout, "In %s, searching for key=%s\n", __FUNCTION__, dhashkey);
#endif

	e = __arc_lookup(ccache, dhashkey, len);
	if (e == NULL)
		return NULL;
	
	struct object *obj = __arc_list_entry(e, struct object, entry);
	if (obj == NULL)
		return NULL;

#if 1
	if (iodedupID != obj->iodedupID)
		ccache_dedup_hits++;
	else
		ccache_nondedup_hits++;
#endif

#if defined(SIMREPLAY_DEBUG_SS_DONE)
	printf("Content cache lookup: buf=%s\n", (char*)obj->content);
	printf("Content cache lookup: md5="); puts((char*)obj->dhashkey);
#endif

	return (__u8*)(obj->content);		//could be blk-content or hex hash
}

/* Used in both read and write paths
 * Write path -- write to content-cache by ARC 
 * Read path --- write to content-cache while doing map update
 */
int overwrite_in_contentcache(struct preq_spec *preq) 
{    
    unsigned char key[HASHLEN];
#if defined(SIMREPLAY_DEBUG_SS_DONE)
    fprintf(stdout, "In %s, content=%s and ", __FUNCTION__, preq->content);
#endif

#ifdef SIMREPLAY_DEBUG_SS
    assert(preq != NULL);
    assert(preq->bytes == BLKSIZE);
#endif

	/* If it is already accomplished, nothing to do here */
	if (preq->done == 1)
		return 0;

	if (memcmp(preq->content, zeroarray, BLKSIZE) == 0)
	{
		memcpy(key, zerohash, HASHLEN);		//hash is only 16 char long
	}
    else if (collectformat)
	{
		assert(preq->content != NULL && strlen((char*)preq->content)==(HASHLEN_STR-1));
    	if (getHashKey(preq->content, HASHLEN_STR-1, key))
        	RET_ERR("getHashKey() returned error for HASHLEN_STR\n");
	}
	else
	{
	    /* Hash(+magic) the block */
    	if (getHashKey(preq->content, BLKSIZE, key))
        	RET_ERR("getHashKey() returned error\n");
	}

#if defined(SIMREPLAY_DEBUG_SS_DONE)
	fprintf(stdout, "key=%s\n", key);
#endif

	/* If disk is being simulated, the hex hash is already present in the traces
	 * and dhashkey is hash of hex hash.
	 * Similarly done in iodedupReadRequest()
     */
    contentcache_add((__u8*)key, preq->content, BLKSIZE, preq->ioblk);

	/* In read path, setting done isnt significant because this is return path.
	 * but in write path, setting done flag indicates that this request need not
	 * go to disk. However, since this is content-cache which is used only in 
	 * I/O dedup, write requests do need to reach disk.
	 */
	//preq->done = 1;	//Dont set done so that write requests reach disk
	return 0;
}

