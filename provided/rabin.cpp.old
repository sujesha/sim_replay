#include <stdlib.h>
#include <stdio.h>
#include <assert.h>
#include <string.h>
//#include "defs.h"
#include "debug.h"
#include "mbuffer.h"
#include "rabinpoly.h"
#include "rabin.h"
//#include "extra.h"
//#include "mapping.h"	/* chunk_id_t and mapping structures */
//


unsigned long numChunks;	/* Total number of non-zero chunks */

uint32_t get_timestamp()
{
//	return ktime_to_ns(ktime_get());
	return (uint32_t)0;		
}

static uint64_t buildInitialPrint(mbuffer_t *m, __u16 *iter, window& myRabin)
{
    uint64_t h=0;
    size_t i;
#ifdef DEBUG_SS
    WHERE;
#endif
    for(i=0; i<NWINDOW; i++)
    {
		h  = myRabin.slide8(m->ptr[i]);	
    }

#ifdef DEBUG_SS
    WHERE;
#endif
    *iter = i;

#ifdef DEBUG_SS
    WHERE;
#endif
    return h;
}

/* resumePrintBuilding: Resume print building from where it was left off
 *          last time. The new muffer for building print is present in
 *          m with size n, and the last time computed h is in lasth
 *          whereas the i count from last time is in lasti
 * @m[in]: Input buffer to be Rabin finger printed
 * @n[in]: Size of the input buffer
 * @lasth[in]: h that was computed in last invocation
 * @lasti[in]: i that was iterated to in last invocation
 * @finalh[out]: h that has been computed at end of current invocation
 */
static __u16 resumePrintBuilding(mbuffer_t *m, __u16 n, /*, int winlen*/
                        uint64_t lasth, __u16 lasti, uint64_t *finalh,
						window& myRabin
						)
{
    __u16 i = lasti;
    uint64_t h = lasth;
#if defined(PROCHUNKING_DEBUG_SSS)
    fprintf(stdout, "In %s\n", __FUNCTION__);
#endif

#if defined(DEBUG_SS) || defined(PROCHUNKING_DEBUG_SSS)
    WHERE;
#endif
    while(i<n)
    {
		h  = myRabin.slide8(m->ptr[i]);
        i++;

        /* found chunk boundary, i has been incremented in loop */
        if(((h & RabinMask) == RabinPrint && (i >= MinSegment)) ||
            (i >= MaxSegment))
        {
            *finalh = h;
#if defined(DEBUG_SS) || defined(PROCHUNKING_DEBUG_SSS)
    WHERE;
#endif
            return i;
        }
    }
#if defined(DEBUG_SS) || defined(PROCHUNKING_DEBUG_SSS)
    WHERE;
#endif
    *finalh = h;
    return (n+1);   //no chunk boundary found yet   
}

/* getFreshRabinOffset: Perform Rabin on given buffer & return offset.
 * 
 * @m[in]: Input buffer to be Rabin finger printed
 * @n[in]: Size of the input buffer
 * finalh[out]: output h
 * @return: offset at which chunk boundary encountered
 */
static size_t getFreshRabinOffset(mbuffer_t *m, __u16 *n, uint64_t *finalh, 
									window& myRabin
									)
{
    __u16 i=0, offset = 0;
    uint64_t h=0;
    uint64_t newh=0;
#if defined(PROCHUNKING_DEBUG_SSS)
    fprintf(stdout, "In %s\n", __FUNCTION__);
#endif

#ifdef DEBUG_SS
    assert(m != NULL && n != NULL && finalh != NULL);
#endif

    /* USED(winlen) */
    if(*n < MinSegment)
    {
#if defined(DEBUG_SS) || defined(PROCHUNKING_DEBUG_SSS)
    WHERE;
#endif
        return (*n+1);  //too few bytes to make a chunk boundary
    }

    h = buildInitialPrint(m, &i, myRabin);

    offset = resumePrintBuilding(m, *n, h, i, &newh/*, ptime*/, myRabin);
#ifdef DEBUG_SS
    assert(offset != 0);
#endif

    *finalh = newh;

#if defined(DEBUG_SS) || defined(PROCHUNKING_DEBUG_SSS)
    WHERE;
#endif
    return offset;
}

/* Memory alloc for chunk_t struct ptr */
MY_EXTERN_C struct chunk_t* alloc_chunk_t(__u16 size)
{
    struct chunk_t *chunk;
    chunk = (struct chunk_t *)malloc(sizeof(struct chunk_t));
    if(chunk==NULL)
    {
        VOID_ERR("Memory allocation failed for chunk.\n");
        return NULL;
    }
    mbuffer_create(&(mbuf(chunk)), size);
    return chunk;
}

/* Returns 0 on success */
MY_EXTERN_C struct chunk_t* free_chunk_t(struct chunk_t **chunk)
{
#if defined(DEBUG_SS) || defined(PROCHUNKING_DEBUG_SSS)
    assert(*chunk != NULL);
    WHERE;
#endif

    mbuffer_free(&mbuf(*chunk));
    free(*chunk);
    *chunk = NULL;

    return NULL;
}


/* mergeLeftovers: appends "buf" data to "leftover" data and 
 *          outputs a single "chunk".
 *
 * @chunk[out]: output chunk data
 * @leftover[in|out]: input and output leftover data pointer
 * @buf[in]: data to be appended to leftover
 * @len[in]: len of data buf
 * @bytes_left: len of leftover chunk
 * @return: status
 */
MY_EXTERN_C void mergeLeftovers(struct chunk_t **chunk, struct chunk_t **leftover,
                    unsigned char *buf, __u16 len, __u16 bytes_left)
{
#if defined(PROCHUNKING_DEBUG_SSS)
    fprintf(stdout, "In %s\n", __FUNCTION__);
    assert(*chunk != NULL);
#endif

    if(bytes_left > 0)
    {
#if defined(DEBUG_SS) || defined(PROCHUNKING_DEBUG_SSS)
    WHERE;
#endif
        memcpy(cdata(*chunk), cdata(*leftover), bytes_left);
        *leftover = free_chunk_t(leftover);
        *leftover = NULL;
    }
    if (len > 0)
    {
#if defined(DEBUG_SS) || defined(PROCHUNKING_DEBUG_SSS)
    WHERE;
#endif
        memcpy(cdata(*chunk)+bytes_left, buf, len);
    }
    *(cdata(*chunk) + bytes_left + len) = '\0';
    csize(*chunk) = bytes_left + len;

#ifdef DEBUG_SS
    assert(*leftover == NULL);
#endif

    /* bytes_left value is to be untouched here */

    return;
}

/* invokeRabin: Implementation of the Rabin chunking algorithm.
 *      For a brand new data buffer, it uses getFreshRabinOffset() otherwise
 *      uses resumePrintBuilding() to avoid repetitive effort of finger
 *      printing. For example, if a block boundary is encountered but
 *      chunk boundary is not found, then we need to fetch a new block
 *      and chunk only the new data. Re-chunking of the "old" data
 *      is not necessary, since it will be repetitive and is guaranteed
 *      to not yield any chunk boundary. This is a minor optimization,
 *      and is enabled by remembering the lasth and lasti.
 *
 * @chunk[in]: input data to be chunked
 * @len[in]: length of input data
 * @bytes_left[in|out]: number of bytes left over from last invocation
 * @offset[out]: offset at which a boundary found
 * @initflag[in]: To indicate whether invocation is in scanning phase or I/O
 * @return: split flag  
 */
MY_EXTERN_C int invokeRabin(struct chunk_t *chunk, __u16 *len, 
						__u16 *bytes_left,
                        __u16 *foundclen, 
						//,uint32_t *ptime) TODO:ptime needed?    
                        int initflag)
{
    /* Since this function could be called by scanning phase 
     * (initflag==1) and by online phase (initflag==0), so we have
     * 2 copies of each static variable.
     */
    static uint64_t h;          /* static, to remember in next call */
    static uint64_t prevh = 0; /* static, to remember in next call */
    static int previ = -1;  /* static, to remember in next call */
    static uint64_t ioh;            /* static, to remember in next call */
    static uint64_t ioprevh = 0; /* static, to remember in next call */
    static int ioprevi = -1;    /* static, to remember in next call */

    /* These are pointers to the static variables above */
    uint64_t *hp;           /* h pointer */
    uint64_t *prevhp;        /* prevh pointer */
    int *previp;            /* previ pointer */

	window myRabin(FINGERPRINT_PT, NWINDOW);

#if defined(PROCHUNKING_DEBUG_SSS)
    fprintf(stdout, "In %s\n", __FUNCTION__);
#endif

    if (initflag == INIT_STAGE)
    {
        hp = &h;
        prevhp = &prevh;
        previp = &previ;
    }
    else
    {
        hp = &ioh;
        prevhp = &ioprevh;
        previp = &ioprevi;
    }

    int split = 0;

#ifdef DEBUG_SS
    assert(chunk != NULL);
    if (*bytes_left + *len != csize(chunk))
        fprintf(stderr, "bytes_left=%u, len=%u\n", *bytes_left, *len);
    assert(*bytes_left + *len == csize(chunk));
#endif

    if (*bytes_left > 0 && *len == 0)
    {
    /* Need not be handled here again, since resumeChunking is already handling? */
#if defined(DEBUG_SS) || defined(PROCHUNKING_DEBUG_SSS)
    WHERE;
#endif
        /* Zero sector was read, so leftover becomes chunk by itself*/
        /* TODO: What if *bytes_left<MinSegment and zero sector encountered? */
        *foundclen = *bytes_left;
    }
    else if (*bytes_left > 0 && *bytes_left < MinSegment)   /* len > 0 */
    {
#if defined(DEBUG_SS) || defined(PROCHUNKING_DEBUG_SSS)
    WHERE;
#endif
        /* do chunking afresh */
		myRabin.reset();    //to clear up the buffer in the RABINPOLY CLASS
        *foundclen = getFreshRabinOffset(&(mbuf(chunk)), &(csize(chunk)), hp,
						myRabin);
    }
    else if (*bytes_left > 0)   /* len > 0 && *bytes_left >= MinSegment */
    {
#if defined(DEBUG_SS) || defined(PROCHUNKING_DEBUG_SSS)
    WHERE;
#endif
        /* do chunking of appended data with lasth and lasti */
        *foundclen = resumePrintBuilding(&mbuf(chunk), csize(chunk),
                                    *prevhp, *previp, hp/*, ptime*/, myRabin);
    }
    else    /* bytes_left == 0 && len > 0 */
    {
#if defined(DEBUG_SS) || defined(PROCHUNKING_DEBUG_SSS)
    WHERE;
#endif
        /* do chunking afresh */
		myRabin.reset();    //to clear up the buffer in the RABINPOLY CLASS
        *foundclen = getFreshRabinOffset(&(mbuf(chunk)), &(csize(chunk)), hp,
						myRabin);
    }

    /* Note prev & previ if and only if only block boundary encountered */
    if (*foundclen > csize(chunk))
    {
#if defined(DEBUG_SS) || defined(PROCHUNKING_DEBUG_SSS)
    WHERE;
#endif
        *prevhp = *hp;
        *previp = csize(chunk);
    }
    else
    {
#if defined(DEBUG_SS) || defined(PROCHUNKING_DEBUG_SSS)
    WHERE;
#endif
        *prevhp = 0;
        *previp = -1;
    }

    if (*foundclen < csize(chunk))
    {
#if defined(DEBUG_SS) || defined(PROCHUNKING_DEBUG_SSS)
    WHERE;
#endif
        split = 1;
        /* Adjusting for next call of invokeRabin() upon split = 1 */
        *bytes_left = 0;
        *len = csize(chunk) - *foundclen;
#ifdef PDD_REPLAY_DEBUG_SSS_DONE
		printf("h = %llu\n", h);
#endif
    }
    else
    {
#if defined(DEBUG_SS) || defined(PROCHUNKING_DEBUG_SSS)
    WHERE;
#endif
        split = 0;
    }

    return split;
}

/* Retain offset # of bytes in chunk, copy rest to leftover */
MY_EXTERN_C void splitChunkBuffer(struct chunk_t **chunk, 
								struct chunk_t** leftover, __u16 offset)
{
    int r;
#if defined(PROCHUNKING_DEBUG_SSS)
    fprintf(stdout, "In %s\n", __FUNCTION__);
#endif

#if defined(DEBUG_SS) || defined(PROCHUNKING_DEBUG_SSS)
    assert(offset < csize(*chunk));
    WHERE;
#endif
    *leftover = alloc_chunk_t((csize(*chunk) - offset));
#if defined(DEBUG_SS) || defined(PROCHUNKING_DEBUG_SSS)
    WHERE;
#endif

    /* Retain offset # of bytes in chunk, copy rest to leftover */
    r = mbuffer_split(&(mbuf(*chunk)), &(mbuf(*leftover)), offset);
    if(r!=0)
    {
        VOID_ERR("Unable to split memory buffer.\n");
    }
#if defined(DEBUG_SS) || defined(PROCHUNKING_DEBUG_SSS)
    WHERE;
#endif

    r = mbuffer_realloc(&(mbuf(*chunk)), offset);
    if(r!=0)
    {
        VOID_ERR("Unable to realloc memory buffer.\n");
    }
#if defined(DEBUG_SS) || defined(PROCHUNKING_DEBUG_SSS)
    WHERE;
#endif

#if defined(DEBUG_SS) || defined(PROCHUNKING_DEBUG_SSS)
    assert(*chunk != NULL && *leftover != NULL);
    WHERE;
#endif

    return;
}

MY_EXTERN_C struct chunk_t* chunk_realloc(struct chunk_t *c, __u16 offset)
{
    int r;
    r = mbuffer_realloc(&(mbuf(c)), offset);
    if (r)
    {
        VOID_ERR("Unable to realloc memory buffer.\n");
    }
#if defined(DEBUG_SS) || defined(PROCHUNKING_DEBUG_SSS)
    WHERE;
#endif
    return c;
}

